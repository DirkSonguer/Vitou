
# Game Server Proof of Concept

This is a proof of concept for a game server middleware.

Proof of concept means: It is a really, really bad idea to use this thing in any way productive. For example it only runs in memory. There is no data storage attached and if it crashes, all is gone. Also, there is no real security and it's full of things that will affect performance in a very, very bad way. There is no caching. At all. In other words I tried to add TODOs as a blacklist but gave up since there would be too many. Got it?


## Installation

### Prerequisites
- Get node.js: https://nodejs.org/download/
- Change in the project root and get all dependencies with "npm install"

### Run servers
- "node ./gameserver.js" in project root runs the game server 

- "node ./testserver.js" in project root runs a server that provides a demo interface
- You can open it via browser at "http://localhost:8887/"
- It will send a test client that allows you to send events to the server

See server documentation in /documentation/server.


## How to use as client

The calls to the server revolves around modules, actions and data, handed over in a
JSON object.

{
	"type": "STRING",
	"module": "STRING",
	"action": "STRING",
	"data": "STRING"
};

The type defines if the event is for the game server itself ("system") or the game ("game"). The module defines the directory within /server_modules or /game_modules (depending on type), the action defines the file to call. Data describes what is handed over to the function.

Example: { "module": "lobby", "action": "joinlobby", "data": "a86c3760-3a05-11e5-a155-fd6757717cdb" };

The same structure is also send back to the client. Yes, lazy. WIll change. Maybe.

See API documentation in /documentation/API.


## Proof of Concept Game

The proof of concept tries to implement a simple tanks-like game as example. The goal is to have as much game logic, data and structures dynamic as possible. Ideally everything should be changable via an online editor (changing the data files) or very easy scripting files.

For game details, see documentation in /documentation/examplegame.

## Demo scenario

We expect two clients (Player1, Player2) that connect and play together. This is the "script" they might go through from a server view.

1) Player 1: Connect to the server as socket
2) Player 1: Buy new tank (game/shop/buytank)
3) Player 1: Select new tank as main tank, still with default turret (game/meta_selecttank)
2) Player 2: Connect to the server as socket
4) Player 2: Buy new weapon turret (game/meta_buyweaponturret)
5) Player 2: Use new turret with current tank (game/meta_selectweaponturret)
6) Player 1: Open a new lobby (lobby/create)
7) Player 2: Join the lobby created by player 1 (lobby/join with lobby id)
8) Player 1: Confirms the match (lobby/confirm with lobby id)
9) Player 2: Also confirms the match (lobby/confirm with lobby id)

..

99) Player 1: Disconnect from the server
100) Player 2: Disconnect from the server

